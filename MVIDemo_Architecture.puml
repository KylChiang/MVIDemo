@startuml MVIDemo_New_Architecture

' 設定字型和樣式
skinparam {
    DefaultFontName "Helvetica"
    ClassFontName "Helvetica"
    PackageFontName "Helvetica"
    InterfaceFontName "Helvetica"
    ActivityFontName "Helvetica"
    ArrowFontName "Helvetica"
    
    FontColor black
    BackgroundColor white
    
    RoundCorner 10
    
    ClassAttributeFontSize 10
    ClassFontSize 11
}

!define DOMAIN_COLOR #E8F4FD
!define DATA_COLOR #FFF2CC
!define FEATURE_COLOR #E1D5E7
!define CORE_COLOR #FFE6CC
!define APP_COLOR #D5E8D4

title MVIDemo - New MVI Architecture
' note top : Intent -> UseCase -> Reducer -> Model -> Effect

package "Core Layer" {
    interface ModelProtocol {
        + Intent
        + State
        + state: State
        + handle(intent: Intent)
    }

    interface Effect {
        + execute()
    }

    class EffectHandler {
        + handle(effect: Effect)
    }

    package "Effect Implementations" {
        class NavigationEffect {
            + destination: View
            + navigationController: NavigationController
            + execute()
        }

        class AlertEffect {
            + title: String
            + message: String
            + actions: AlertAction[]
            + execute()
        }

        class ToastEffect {
            + message: String
            + duration: Number
            + execute()
        }

        class HapticEffect {
            + type: FeedbackStyle
            + execute()
        }
    }

    class AlertAction {
        + title: String
        + style: ActionStyle
        + handler: Handler
    }
}

package "Domain Layer" <<Frame>> DOMAIN_COLOR {
    
    package "Entities" {
        class User {
            + account: String
            + token: String
            + init(account: String, token: String)
        }
        
        class Announcement {
            + userId: Int
            + id: Int
            + title: String
            + body: String
            + init(userId: Int, id: Int, title: String, body: String)
        }
    }
    
    package "Repository Interfaces" {
        interface AuthRepository {
            + login(account: String) async throws User
            + logout() async throws
            + getCurrentUser() User
            + saveUser(user: User)
            + clearUser()
        }
        
        interface AnnouncementRepository {
            + fetchAnnouncements() async throws Announcement[]
        }
    }
    
    package "Use Cases" {
        class LoginUseCase {
            - authRepository: AuthRepository
            + init(authRepository: AuthRepository)
            + execute(account: String) async throws User
        }
        
        class LogoutUseCase {
            - authRepository: AuthRepository
            + init(authRepository: AuthRepository)
            + execute() async throws
        }
        
        class GetCurrentUserUseCase {
            - authRepository: AuthRepository
            + init(authRepository: AuthRepository)
            + execute() User
        }
        
        class FetchAnnouncementsUseCase {
            - announcementRepository: AnnouncementRepository
            + init(announcementRepository: AnnouncementRepository)
            + execute() async throws List<Announcement>
        }
    }
}

package "Data Layer" <<Frame>> DATA_COLOR {
    class AuthRepositoryImpl {
        - userDefaults: UserDefaults
        - userKey: String
        + login(account: String) async throws User
        + logout() async throws
        + getCurrentUser() User
        + saveUser(user: User)
        + clearUser()
    }
    
    class AnnouncementRepositoryImpl {
        + fetchAnnouncements() async throws List<Announcement>
    }
}

package "Features Layer" <<Frame>> FEATURE_COLOR {
    
    package "Login Feature" {
        enum LoginIntent {
            + accountChanged(String)
            + loginClicked
            + loginSuccess(User)
            + loginFailure(Error)
            + clearError
        }
        
        class LoginState {
            + account: String
            + isLoading: Bool
            + isLoginEnabled: Bool
            + errorMessage: String
            + user: User
            + init(account: String, isLoading: Bool, isLoginEnabled: Bool, errorMessage: String, user: User)
            + static let initial: LoginState
        }
        
        interface LoginReducerProtocol {
            + reduce(state: LoginState, intent: LoginIntent) LoginState
        }
        
        class LoginReducer {
            + reduce(state: LoginState, intent: LoginIntent) LoginState
        }
        
        enum LoginEffect {
            + showLoginSuccess
            + showLoginError(String)
            + navigateToHome
            + hapticFeedback
            + toEffect() Effect
        }
        
        class LoginModel {
            - reducer: LoginReducerProtocol
            - loginUseCase: LoginUseCase
            - effectHandler: EffectHandler
            + state: LoginState
            + init(reducer: LoginReducerProtocol, loginUseCase: LoginUseCase, effectHandler: EffectHandler)
            + handle(intent: LoginIntent)
        }
        
        class LoginView {
            - model: LoginModel
            - isLoggedIn: Binding
            + init(model: LoginModel, isLoggedIn: Binding)
        }
    }
    
    package "Home Feature" {
        enum HomeIntent {
            + viewAppeared
            + userLoaded(User)
            + logoutClicked
            + logoutSuccess
            + logoutFailure(Error)
            + openAnnouncements
            + clearNavigationFlag
        }
        
        class HomeState {
            + user: User
            + isLoading: Bool
            + errorMessage: String
            + shouldNavigateToAnnouncements: Bool
            + init(user: User, isLoading: Bool, errorMessage: String, shouldNavigateToAnnouncements: Bool)
            + static let initial: HomeState
        }
        
        interface HomeReducerProtocol {
            + reduce(state: HomeState, intent: HomeIntent) HomeState
        }
        
        class HomeReducer {
            + reduce(state: HomeState, intent: HomeIntent) HomeState
        }
        
        enum HomeEffect {
            + showLogoutSuccess
            + showLogoutError(String)
            + navigateToLogin
            + navigateToAnnouncements
            + hapticFeedback
            + toEffect() Effect
        }
        
        class HomeModel {
            - reducer: HomeReducerProtocol
            - getCurrentUserUseCase: GetCurrentUserUseCase
            - logoutUseCase: LogoutUseCase
            - effectHandler: EffectHandler
            + state: HomeState
            + init(reducer: HomeReducerProtocol, getCurrentUserUseCase: GetCurrentUserUseCase, logoutUseCase: LogoutUseCase, effectHandler: EffectHandler)
            + handle(intent: HomeIntent)
        }
        
        class HomeView {
            - homeModel: HomeModel
            - announcementsModel: AnnouncementsModel
            - isLoggedIn: Binding
            + init(homeModel: HomeModel, announcementsModel: AnnouncementsModel, isLoggedIn: Binding)
        }
    }
    
    package "Announcements Feature" {
        enum AnnouncementsIntent {
            + fetchAnnouncements
            + fetchSuccess(List<Announcement>)
            + fetchFailure(Error)
            + refreshAnnouncements
        }
        
        class AnnouncementsState {
            + announcements: List<Announcement>
            + isLoading: Bool
            + errorMessage: String
            + init(announcements: List<Announcement>, isLoading: Bool, errorMessage: String)
            + static let initial: AnnouncementsState
        }
        
        interface AnnouncementsReducerProtocol {
            + reduce(state: AnnouncementsState, intent: AnnouncementsIntent) AnnouncementsState
        }
        
        class AnnouncementsReducer {
            + reduce(state: AnnouncementsState, intent: AnnouncementsIntent) AnnouncementsState
        }
        
        enum AnnouncementsEffect {
            + showFetchSuccess
            + showFetchError(String)
            + hapticFeedback
            + refreshComplete
            + toEffect() Effect
        }
        
        class AnnouncementsModel {
            - reducer: AnnouncementsReducerProtocol
            - fetchAnnouncementsUseCase: FetchAnnouncementsUseCase
            - effectHandler: EffectHandler
            + state: AnnouncementsState
            + init(reducer: AnnouncementsReducerProtocol, fetchAnnouncementsUseCase: FetchAnnouncementsUseCase, effectHandler: EffectHandler)
            + handle(intent: AnnouncementsIntent)
        }
        
        class AnnouncementsView {
            - model: AnnouncementsModel
            + init(model: AnnouncementsModel)
        }
    }
}

package "App Layer" <<Frame>> APP_COLOR {
    class MVIDemoApp {
        + body: some Scene
    }
    
    class ContentView {
        - dependencyContainer: DependencyContainer
        - isLoggedIn: State
        + init(dependencyContainer: DependencyContainer)
    }
    
    class DependencyContainer {
        + authRepository: AuthRepository
        + announcementRepository: AnnouncementRepository
        + loginUseCase: LoginUseCase
        + logoutUseCase: LogoutUseCase
        + getCurrentUserUseCase: GetCurrentUserUseCase
        + fetchAnnouncementsUseCase: FetchAnnouncementsUseCase
        + effectHandler: EffectHandler
        + makeLoginReducer() LoginReducer
        + makeHomeReducer() HomeReducer
        + makeAnnouncementsReducer() AnnouncementsReducer
        + makeLoginModel() LoginModel
        + makeHomeModel() HomeModel
        + makeAnnouncementsModel() AnnouncementsModel
    }
}

' Core Layer Relationships
NavigationEffect ..|> Effect : implements
AlertEffect ..|> Effect : implements
ToastEffect ..|> Effect : implements
HapticEffect ..|> Effect : implements
AlertEffect --> AlertAction : uses
EffectHandler --> Effect : handles

' Domain Layer Relationships
LoginUseCase --> AuthRepository : uses
LogoutUseCase --> AuthRepository : uses
GetCurrentUserUseCase --> AuthRepository : uses
FetchAnnouncementsUseCase --> AnnouncementRepository : uses

' Data Layer Implementations
AuthRepositoryImpl ..|> AuthRepository : implements
AnnouncementRepositoryImpl ..|> AnnouncementRepository : implements

' Login Feature - MVI Flow
LoginView --> LoginModel : uses
LoginModel ..|> ModelProtocol : implements
LoginModel --> LoginReducerProtocol : uses
LoginModel --> LoginUseCase : uses
LoginModel --> EffectHandler : uses
LoginModel --> LoginState : manages
LoginReducer ..|> LoginReducerProtocol : implements
LoginReducer --> LoginState : calculates
LoginReducer --> LoginIntent : handles
LoginEffect --> Effect : creates
LoginModel --> LoginEffect : triggers

' Home Feature - MVI Flow
HomeView --> HomeModel : uses
HomeModel ..|> ModelProtocol : implements
HomeModel --> HomeReducerProtocol : uses
HomeModel --> GetCurrentUserUseCase : uses
HomeModel --> LogoutUseCase : uses
HomeModel --> EffectHandler : uses
HomeModel --> HomeState : manages
HomeReducer ..|> HomeReducerProtocol : implements
HomeReducer --> HomeState : calculates
HomeReducer --> HomeIntent : handles
HomeEffect --> Effect : creates
HomeModel --> HomeEffect : triggers

' Announcements Feature - MVI Flow
AnnouncementsView --> AnnouncementsModel : uses
AnnouncementsModel ..|> ModelProtocol : implements
AnnouncementsModel --> AnnouncementsReducerProtocol : uses
AnnouncementsModel --> FetchAnnouncementsUseCase : uses
AnnouncementsModel --> EffectHandler : uses
AnnouncementsModel --> AnnouncementsState : manages
AnnouncementsReducer ..|> AnnouncementsReducerProtocol : implements
AnnouncementsReducer --> AnnouncementsState : calculates
AnnouncementsReducer --> AnnouncementsIntent : handles
AnnouncementsEffect --> Effect : creates
AnnouncementsModel --> AnnouncementsEffect : triggers

' App Layer Dependencies
ContentView --> DependencyContainer : uses
DependencyContainer --> AuthRepositoryImpl : creates
DependencyContainer --> AnnouncementRepositoryImpl : creates
DependencyContainer --> LoginUseCase : creates
DependencyContainer --> LogoutUseCase : creates
DependencyContainer --> GetCurrentUserUseCase : creates
DependencyContainer --> FetchAnnouncementsUseCase : creates
DependencyContainer --> EffectHandler : creates
DependencyContainer --> LoginModel : creates
DependencyContainer --> HomeModel : creates
DependencyContainer --> AnnouncementsModel : creates

' Entity Usage
LoginState --> User : contains
HomeState --> User : contains
AnnouncementsState --> Announcement : contains
AuthRepository --> User : returns
AnnouncementRepository --> Announcement : returns

' MVI Flow Annotations
note right of LoginModel : 流程控制中心\n決定何時呼叫 UseCase\n發出 Intent 給 Reducer\n拋出 Effect
note right of LoginReducer : 只是計算狀態\n不做網路、不做動畫\n不做導頁
note right of LoginIntent : 只描述「要做什麼」\n不包含邏輯處理
note right of LoginUseCase : 只處理「怎麼做」\n不處理 UI
note right of LoginEffect : 處理「不是狀態」的畫面反應\n例如跳轉、錯誤提示、震動

@enduml